import Head from "next/head";
import { useEffect, useState } from "react";
import Lottery from "../artifacts/contracts/Lottery.sol/Lottery.json";
import { ethers } from "ethers";
import Header from "../components/Header";

export default function Home() {
  const [loading, setLoading] = useState(true);
  const [account, setAccount] = useState("");
  const [contract, setContract] = useState(null);
  const [balance, setBalance] = useState(null);
  const [players, setPlayers] = useState([]);
  const [winner, setWinner] = useState([]);
  const contractABI = Lottery.abi;
  const contractAddress = '0x13B8d31Be283Fc318eB2a1c3B768BF3ECb6cdE1c';
  
  useEffect(() => {
    const provider = new ethers.providers.Web3Provider(window.ethereum);

    const loadProvider = async () => {
      if (provider) {
        window.ethereum.on("chainChanged", () => {
          window.location.reload();
        });

        window.ethereum.on("accountsChanged", () => {
          window.location.reload();
        });
        await provider.send("eth_requestAccounts", []);
        const signer = provider.getSigner();
        const address = await signer.getAddress();
        setAccount(address);
        const contract = new ethers.Contract(
          contractAddress,
          contractABI,
          signer
        );
        setContract(contract);

        const AllPlayers = await contract.getPlayers();
        setPlayers(AllPlayers);

        const Balance = await contract.getBalance();
        setBalance(Balance);

        const Winner = await contract.getWinners();
        setWinner(Winner);

        setLoading(false);
      } else {
        console.error("Metamask is not installed");
      }
    };

    provider && loadProvider();
  }, []);

  if (loading) {
    return (
      <main className="text-5xl text-center p-10 animate-pulse text-blue-500">
        <h2>loading please wait...</h2>
      </main>
    );
  }

  const enterLottery = async () => {
    try {
      await contract.enter({ value: ethers.utils.parseEther("0.01") });
    } catch (error) {
      console.error(error);
    }
  };

  const pickWinner = async () => {
    try {
      const winner = await contract.pickWinner();
    } catch (error) {
      console.log(error);
    }
  };

  
  return (
    <div className="bg-gray-700 h-screen">
      <Head>
        <title>Lottery Dapp</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header account={account} />
      <hr className="text-white " />

      <main className="items-center justify-center">
        <section className="flex flex-col items-center justify-between text-white font-semibold text-lg gap-6 py-10 mx-auto">
          <div className="text-4xl space-y-4 pb-10 ">
            <h1>Lottery #1</h1>
            <h1>
              Pot: {ethers.utils.formatUnits(balance.toString(), "ether")}{" "}
              ethers{" "}
            </h1>
            <h1>LastWinner: {winner ? winner : "0x00"} </h1>
            <h1>EnterFee: 0.01 ethers</h1>
          </div>
          <div className="flex items-center space-x-10 justify-between">
            <div className="flex flex-col items-center">
              <h1>Winners</h1>
              {winner.map((player) => (<p>{player}</p>))}
            </div>
            <div className="flex flex-col items-center">
              <h1>Players</h1>
              {players.map((player) => (<p>{player}</p>))}
            </div>
          </div>
          <button
            onClick={enterLottery}
            className="px-10 py-4 rounded-full border-pink-500 border-2"
          >
            Enter
          </button>
          <button
            onClick={pickWinner}
            className="px-10 py-4 rounded-full border-pink-500 border-2 "
          >
            Pick Winner
          </button>
        </section>
      </main>
    </div>
  );
}
